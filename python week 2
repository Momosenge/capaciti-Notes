Anatomy of a Function in Python:
Definition: Functions in Python are defined using the def keyword followed by the function name and parameters.
Arguments and Parameters: Functions can take zero or more parameters. Arguments are the actual values passed to a function when it's called, while parameters are the placeholders for those values.
Return Values: Functions can optionally return a value using the return statement.
Docstrings: It's good practice to include a docstring (a string literal) at the beginning of a function to describe its purpose and usage.
Scope: Functions have their own scope, meaning variables defined within a function are only accessible within that function (unless explicitly declared as global).
Function Calls: Functions are called using their name followed by parentheses containing the arguments.

Variables and Scope:
Local Variables: Variables defined within a function have local scope and are accessible only within that function.
Global Variables: Variables defined outside of any function have global scope and are accessible from anywhere in the module.
Scope Resolution: When a variable is referenced, Python searches for it first in the local scope, then in enclosing (non-local) scopes, and finally in the global scope.
Global Keyword: The global keyword allows you to modify global variables from within a function's scope.

Functions as Variables:
In Python, functions are first-class objects, meaning they can be assigned to variables, passed as arguments to other functions, and returned from functions.
This feature allows for powerful functional programming paradigms, such as higher-order functions and function composition.
  
Anatomy of a Class:
Definition: Classes in Python are defined using the class keyword followed by the class name and a colon.
Attributes: Classes can have attributes, which are variables associated with the class or its instances.
Methods: Classes can have methods, which are functions associated with the class or its instances.
Constructor: The __init__ method is a special method used for initializing new instances of a class.
Instance Variables: Instance variables are variables that are unique to each instance of a class.
Class Variables: Class variables are variables shared among all instances of a class.
                                                         
Instance, Class, and Static Methods:
Instance Methods: Instance methods operate on an instance of the class and have access to instance variables.
Class Methods: Class methods operate on the class itself and have access to class variables.
Static Methods: Static methods are independent of the class and do not have access to instance or class variables.

Inheritance:
Definition: Inheritance allows a class to inherit attributes and methods from another class.
Base Class (Superclass): The class being inherited from.
Derived Class (Subclass): The class that inherits from another class.
Method Overriding: Subclasses can override methods defined in the superclass.

Handling Errors and Exceptions:
Try-Except Blocks: Exceptions are handled using try and except blocks. Code inside the try block is executed, and if an exception occurs, the code inside the corresponding except block is executed.
Exception Types: Different types of exceptions can be caught by specifying the exception type after the except keyword.
Finally Block: The finally block is executed whether an exception occurs or not and is often used for cleanup actions.
Raising Exceptions: Exceptions can be raised manually using the raise statement.

Managing and Handling Exceptions:
Exception Handling Strategies: Error handling strategies include logging errors, displaying user-friendly error messages, retrying failed operations, and gracefully handling failures.
Logging: The logging module can be used to log error messages and other relevant information during exception handling.
Working with Custom Exceptions:
Definition: Custom exceptions are user-defined exception classes that inherit from Python's built-in exception classes or from other custom exception classes.
Purpose: Custom exceptions allow you to create specific error types for your application, providing more context and clarity when handling errors.
Usage: Custom exceptions are raised and caught in the same way as built-in exceptions, using raise and except statements.

Fundamentals of threads and processes

Threads:
Definition: A thread is the smallest unit of execution within a process. Multiple threads can exist within the same process and share the same memory space.
Concurrency: Threads enable concurrent execution of tasks, where multiple threads execute independently and potentially simultaneously.
Lightweight: Threads are lightweight compared to processes, as they share resources such as memory and file handles with other threads in the same process.
Shared State: Threads within the same process share the same memory space, allowing them to access and modify shared data.
Communication: Threads can communicate with each other through shared variables, message passing, or synchronization primitives like locks and semaphores.
Global Interpreter Lock (GIL): In Python, the Global Interpreter Lock (GIL) restricts the execution of Python bytecode to a single thread at a time, limiting the effectiveness of multi-threading for CPU-bound tasks.


Processes:
Definition: A process is an instance of a running program. Each process has its own memory space, resources, and state.
Isolation: Processes are isolated from each other, meaning they do not share memory by default. Inter-process communication (IPC) mechanisms are used for communication between processes.
Resource Overhead: Processes have higher resource overhead compared to threads, as they require separate memory spaces and system resources.
Concurrency and Parallelism: Processes enable both concurrency (multiple tasks progressing simultaneously) and parallelism (multiple tasks executing simultaneously on multi-core CPUs).
Robustness: Processes are more robust than threads because a crash in one process does not affect others. However, coordinating multiple processes can be more complex.
Spawned by the OS: Processes are managed by the operating system, which creates and schedules them for execution.

Key Differences:
Memory: Threads within the same process share memory, while processes have separate memory spaces.
Communication: Threads communicate through shared memory, while processes use IPC mechanisms.
Resource Overhead: Threads have lower resource overhead than processes, as they share resources.
Robustness: Processes are more robust than threads due to isolation.
Parallelism: Processes enable true parallelism, while the effectiveness of multi-threading is limited by the GIL in Python.
